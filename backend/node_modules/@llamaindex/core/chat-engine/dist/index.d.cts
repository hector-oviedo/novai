import { MessageContent, ChatMessage } from '../../llms/dist/index.cjs';
import { BaseMemory } from '../../memory/dist/index.cjs';
import { EngineResponse } from '../../schema/dist/index.cjs';

interface BaseChatEngineParams<AdditionalMessageOptions extends object = object> {
    message: MessageContent;
    /**
     * Optional chat history if you want to customize the chat history.
     */
    chatHistory?: ChatMessage<AdditionalMessageOptions>[] | BaseMemory<AdditionalMessageOptions>;
}
interface StreamingChatEngineParams<AdditionalMessageOptions extends object = object> extends BaseChatEngineParams<AdditionalMessageOptions> {
    stream: true;
}
interface NonStreamingChatEngineParams<AdditionalMessageOptions extends object = object> extends BaseChatEngineParams<AdditionalMessageOptions> {
    stream?: false;
}
declare abstract class BaseChatEngine {
    abstract chat(params: NonStreamingChatEngineParams): Promise<EngineResponse>;
    abstract chat(params: StreamingChatEngineParams): Promise<AsyncIterable<EngineResponse>>;
    abstract chatHistory: ChatMessage[] | Promise<ChatMessage[]>;
}

export { BaseChatEngine, type BaseChatEngineParams, type NonStreamingChatEngineParams, type StreamingChatEngineParams };
