"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RetrieverQueryEngine", {
    enumerable: true,
    get: function() {
        return RetrieverQueryEngine;
    }
});
const _queryengine = require("@llamaindex/core/query-engine");
const _responsesynthesizers = require("@llamaindex/core/response-synthesizers");
const _utils = require("@llamaindex/core/utils");
class RetrieverQueryEngine extends _queryengine.BaseQueryEngine {
    retriever;
    responseSynthesizer;
    nodePostprocessors;
    constructor(retriever, responseSynthesizer, nodePostprocessors){
        super(async (strOrQueryBundle, stream)=>{
            const nodesWithScore = await this.retrieve(typeof strOrQueryBundle === "string" ? strOrQueryBundle : (0, _utils.extractText)(strOrQueryBundle));
            if (stream) {
                return this.responseSynthesizer.synthesize({
                    query: typeof strOrQueryBundle === "string" ? {
                        query: strOrQueryBundle
                    } : strOrQueryBundle,
                    nodes: nodesWithScore
                }, true);
            }
            return this.responseSynthesizer.synthesize({
                query: typeof strOrQueryBundle === "string" ? {
                    query: strOrQueryBundle
                } : strOrQueryBundle,
                nodes: nodesWithScore
            });
        });
        this.retriever = retriever;
        this.responseSynthesizer = responseSynthesizer || (0, _responsesynthesizers.getResponseSynthesizer)("compact");
        this.nodePostprocessors = nodePostprocessors || [];
    }
    _getPrompts() {
        return {};
    }
    _updatePrompts() {}
    _getPromptModules() {
        return {
            responseSynthesizer: this.responseSynthesizer
        };
    }
    async applyNodePostprocessors(nodes, query) {
        let nodesWithScore = nodes;
        for (const postprocessor of this.nodePostprocessors){
            nodesWithScore = await postprocessor.postprocessNodes(nodesWithScore, query);
        }
        return nodesWithScore;
    }
    async retrieve(query) {
        const nodes = await this.retriever.retrieve(query);
        const messageContent = typeof query === "string" ? query : query.query;
        return await this.applyNodePostprocessors(nodes, messageContent);
    }
}
