"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "HTMLReader", {
    enumerable: true,
    get: function() {
        return HTMLReader;
    }
});
const _schema = require("@llamaindex/core/schema");
class HTMLReader extends _schema.FileReader {
    /**
   * Public method for this reader.
   * Required by BaseReader interface.
   * @param fileContent - The content of the file.
   * @returns Promise<Document[]> A Promise object, eventually yielding zero or one Document parsed from the HTML content of the specified file.
   */ async loadDataAsContent(fileContent) {
        const decoder = new TextDecoder("utf-8");
        const dataBuffer = decoder.decode(fileContent);
        const htmlOptions = this.getOptions();
        const content = await this.parseContent(dataBuffer, htmlOptions);
        return [
            new _schema.Document({
                text: content
            })
        ];
    }
    /**
   * Wrapper for string-strip-html usage.
   * @param html Raw HTML content to be parsed.
   * @param options An object of options for the underlying library
   * @see getOptions
   * @returns The HTML content, stripped of unwanted tags and attributes
   */ async parseContent(html, options = {}) {
        const { stripHtml } = await import("string-strip-html"); // ESM only
        return stripHtml(html).result;
    }
    /**
   * Wrapper for our configuration options passed to string-strip-html library
   * @see https://codsen.com/os/string-strip-html/examples
   * @returns An object of options for the underlying library
   */ getOptions() {
        return {
            skipHtmlDecoding: true,
            stripTogetherWithTheirContents: [
                "script",
                "style",
                "xml",
                "head"
            ]
        };
    }
}
